import os
import re
import time
import json
import logging
from ftplib import FTP_TLS, FTP

SLEEP_INTERVAL_SECONDS = 5 * 60
SERVERS_JSON = 'servers.json'
LOG_FILE = 'log.txt'

pattern = re.compile(r'^(\d+)_(\d{4})-(\d{2})-(\d{2})_(\d{2})_(\d{2})_(\d{2})\.wav$')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILE, encoding='utf-8'),
        logging.StreamHandler()  # –≤—ã–≤–æ–¥ —Ç–∞–∫–∂–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

class Explicit_FTP_TLS(FTP_TLS):
    def ntransfercmd(self, cmd, rest=None):
        conn, size = FTP.ntransfercmd(self, cmd, rest)
        if self._prot_p:
            conn = self.context.wrap_socket(conn, server_hostname=self.host, session=self.sock.session)
        return conn, size

def load_servers():
    with open(SERVERS_JSON, 'r', encoding='utf-8') as f:
        return json.load(f)

def connect_ftps(config):
    ftps = Explicit_FTP_TLS()
    ftps.connect(config['host'], config.get('port', 21))
    ftps.login(config['username'], config['password'])
    ftps.prot_p()
    return ftps

def list_remote_files(ftps, remote_dir):
    ftps.cwd(remote_dir)
    files = ftps.nlst()
    return [f for f in files if pattern.match(f)]

def download_file(ftps, filename, local_dir):
    local_path = os.path.join(local_dir, filename)
    with open(local_path, 'wb') as f:
        ftps.retrbinary(f'RETR {filename}', f.write)
    remote_size = ftps.size(filename)
    return local_path, remote_size

def check_size(local_path, remote_size):
    try:
        local_size = os.path.getsize(local_path)
        if local_size == remote_size:
            logging.info(f"‚úÖ –†–∞–∑–º–µ—Ä —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {local_size} –±–∞–π—Ç")
            return True
        else:
            logging.warning(f"‚ùå –†–∞–∑–º–µ—Ä –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –ª–æ–∫–∞–ª—å–Ω–æ {local_size}, –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {remote_size}")
            return False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞: {e}")
        return False

def rename_file(old_path, z_prefix, local_dir):
    old_name = os.path.basename(old_path)
    m = pattern.match(old_name)
    if not m:
        logging.warning(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω (–Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —à–∞–±–ª–æ–Ω–æ–º): {old_name}")
        return None
    num, yyyy, dd, mm, hh, mi, ss = m.groups()
    new_name = f"{z_prefix}_{num}-{dd}_{mm}_{yyyy}-{hh}_{mi}_{ss}.wav"
    new_path = os.path.join(local_dir, new_name)
    os.rename(old_path, new_path)
    logging.info(f"üîÑ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {old_name} ‚Üí {new_name}")
    return new_name

def delete_remote_files(ftps, files, remote_dir):
    ftps.cwd(remote_dir)
    for f in files:
        try:
            ftps.delete(f)
            logging.info(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {f}")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {f}: {e}")

def process_server(config):
    logging.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É: {config['host']}")

    local_dir = config.get('local_dir')
    if not local_dir:
        logging.error("‚ùå local_dir –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞")
        return

    os.makedirs(local_dir, exist_ok=True)

    try:
        ftps = connect_ftps(config)
        logging.info("üîê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")

        remote_files = list_remote_files(ftps, config['remote_dir'])
        if not remote_files:
            logging.info("üìÇ –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤.")
        else:
            for file in remote_files:
                logging.info(f"‚¨áÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: {file}")
                local_path, remote_size = download_file(ftps, file, local_dir)

                if check_size(local_path, remote_size):
                    z_prefix = config.get('z_prefix', 'DEFAULT')
                    renamed = rename_file(local_path, z_prefix, local_dir)
                    if renamed:
                        delete_remote_files(ftps, [file], config['remote_dir'])
                else:
                    logging.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∞–π–ª {file} (—Ä–∞–∑–º–µ—Ä –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç)")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        try:
            ftps.quit()
            logging.info("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except:
            pass

def main_loop():
    while True:
        logging.info("üîÅ –ù–æ–≤—ã–π –æ–±—â–∏–π —Ü–∏–∫–ª")
        try:
            servers = load_servers()
        except Exception as e:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
            time.sleep(60)
            continue

        for server in servers:
            process_server(server)

        logging.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {SLEEP_INTERVAL_SECONDS // 60} –º–∏–Ω—É—Ç...\n")
        time.sleep(SLEEP_INTERVAL_SECONDS)

if __name__ == '__main__':
    main_loop()
